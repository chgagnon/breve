<!--
	The breve Simulation Environment documentation
 	Copyright (C) 2003 Jonathan Klein
-->

<chapter id="interface">
<title>Graphical User Interface</title>
<para>
<indexterm><primary>GUI</primary></indexterm>
<indexterm><primary>user interface</primary></indexterm>
This chapter describes techniques for specifying how users can interact with
running simulations via a number of user interface features.  The first 
section describes the global simulation menu and the per-object contextual
menus (<xref linkend="menus">).  The next sections describe how to catch keyboard
events (<xref linkend="keyboard">), and how to display a message using a dialog
(<xref linkend="dialog">).
</para>
<para>
While most aspects of The breve Simulation Environment function the same on 
all platforms, user interface is an area where the different platforms offer
different levels of support.  All of the techniques covered in this section
may yield different results on different platforms.
</para>
<para>
The most complete support is the Mac OS X 
breve application.  In addition to the techniques described above, the 
Mac OS X implementation also allows fully customized user interfaces to
be loaded into running simulations.  The section on loading "nib" files
(<xref linkend="nib-files">) describes how this is done.
</para>

<sect1 id="menus"><title>The Simulation Menu and Contextual Menus</title>
<para>
<indexterm><primary>add-menu-separator (method)</primary></indexterm>
<indexterm><primary>add-menu (method)</primary></indexterm>
Menus allow users to trigger events in simulations by selecting menu
items.  Each simulation has a <firstterm>global simulation menu</firstterm>.
This menu is associated with the controller object and is used to trigger
actions which effect the entire simulation.  Objects in the simulation
each have their own <firstterm>contextual menus</firstterm> which allows
the user to trigger actions in individual instances.
</para>
<para>
For the controller object, the methods 
<ulink url="../classes/Control.html#add-menu">add-menu</ulink>
<ulink url="../classes/Control.html#add-menu">add-menu-separator</ulink> of
class <ulink url="../classes/Control.html">Control.tz</ulink> 
are used to configure the menus.
For the simulation objects, the methods 
<ulink url="../classes/Real.html#add-menu">add-menu</ulink>
<ulink url="../classes/Real.html#add-menu">add-menu-separator</ulink>
class <ulink url="../classes/Real.html">Real.tz</ulink> are used.
</para>
</sect1>

<sect1 id="keyboard"><title>Responding to Keyboard Events</title>
<para>
<indexterm><primary>keyboard events</primary></indexterm>
<indexterm><primary>catch-key-X-down (method)</primary></indexterm>
<indexterm><primary>catch-key-X-up (method)</primary></indexterm>
<indexterm><primary>catch-key-left-up (method)</primary></indexterm>
<indexterm><primary>catch-key-left-down (method)</primary></indexterm>
<indexterm><primary>ASCII</primary></indexterm>
<indexterm><primary>hexadecimal</primary></indexterm>

Catching keyboard events lets a simulation execute certain actions in 
response to user keypresses.  To catch keyboard events, simply implement
methods in your simulation with names like 
<function>catch-key-<replaceable>X</replaceable>-down</function> and 
<function>catch-key-<replaceable>X</replaceable>-up</function>, where 
<replaceable>X</replaceable> is any letter or number, uppercase or 
lowercase.  
</para>
<para>
In the event that the key you want to catch is 
<emphasis>not</emphasis> a letter or number, then the method names 
described above may not work, due to conflicts with the steve 
language.  If you tried to catch the space bar, for example, using 
a method named "<function>catch-key- -up</function>", breve would get 
confused&mdash;the same is true of most punctuation as well.  In
this case, you can still catch the event using the <firstterm>hexadecimal
ASCII equivalent</firstterm> for the character.  In this case of the space
bar, the valid breve method name would be 
<function>catch-key-0x20-down</function>.  Consult an ASCII table for more
information.  Don't forget to add <function>0x</function> in front of 
hexadecimal values.
</para>
<para>
In addition to catching regular ASCII characters, similar methods may
be used to catch the arrow keys:
<screen>
catch-key-left-down
catch-key-left-up
catch-key-right-down
catch-key-right-up
catch-key-up-down
catch-key-up-up
catch-key-down-down
catch-key-down-up
</screen>
</para>
<para>
When a key is pressed down, only one call to the "down" method is made
(as opposed to repeated calls until the button is released).  And likewise,
only a single call to the "up" method is made.  If you wish for an action
to continue for as long as a key is pressed down, then you should have 
the "down" callback set a flag or call a method which will trigger a 
continuous event, then use the "up" callback to deactivate the event.
</para>
</sect1>

<sect1 id="dialog"><title>Displaying a Dialog Box</title>
<para>
<indexterm><primary>show-dialog (method)</primary></indexterm>
<indexterm><primary>dialog box</primary></indexterm>
The <ulink url="../classes/Control.html">Control</ulink> method 
<ulink url="../classes/Control.html#show-dialog">show-dialog</ulink> will 
bring up a dialog with the options "yes" and "no".  The arguments passed
to the method will specify the title, message, and text for both the 
"yes" and "no" buttons.  The method returns 1 if the "yes" button is 
clicked, and 0 otherwise.
</para>
<para>
This method only produces a "true" dialog with the Mac OS X application.  
With the command line version of breve, this method will produce a message
to standard output.
</para>
</sect1>

<sect1 id="nib-files"><title>Loading ".nib" Files for Customized Interfaces</title>
<note>
<title>Mac OS X only</title>
<para>
This feature is available under Mac OS X only.
</para>
</note>
<para>
<indexterm><primary>nib files</primary></indexterm>
<indexterm><primary>@nib_file</primary></indexterm>
<indexterm><primary>catch-interface-id-xxx (user-defined method)</primary></indexterm>
<indexterm><primary>set-interface-item (method)</primary></indexterm>
<indexterm><primary>Interface Builder</primary></indexterm>
<indexterm><primary>Mac OS X</primary></indexterm>

breve offers basic support for loading customized ".nib" files to give more 
customized interfaces to simulations.  Users can design a customized window 
of controls (like buttons, sliders, checkboxes, etc.) and load it when the 
simulation is run.  This feature is only available on the Mac OS X version of breve. 
</para>
<para>
In order to build customized interfaces, the Mac OS X development tools including 
"Interface Builder", must be installed.  A basic understanding of Interface Builder is 
also very helpful. 
</para>
<para>
To implement a customized interface for your simulation, follow the following steps: 
<itemizedlist>
<listitem><para>Make a copy of the interface template file included with the breve distribution.</para></listitem>
<listitem><para>Open the new template file with Interface Builder.</para></listitem>
<listitem><para>In the Instances tab of the interface window, open the "InterfaceWindow" instance.</para></listitem>
<listitem><para>Add interface elements from the included palette to the window.</para></listitem>
<listitem><para>For each interface element you add, you should give it a unique "tag" number in it's inspector window (select the object, press command-1).</para></listitem>
<listitem><para>Save the file.</para></listitem>
<listitem><para>At the top of your simulation file, add a line for the file: <function>@nib_file "<replaceable>filename</replaceable>"</function>.</para></listitem>
<listitem><para>For each interface action you wish to catch, you'll need a 
method with the corresponding tag number:                 
<screen>
+ to catch-interface-id-<replaceable>xxx</replaceable> with-string s (string):  
</screen>
You can also set the values of interface with the method 
<ulink url="../classes/Control.html#set-interface-item">set-interface-item</ulink> in the class <ulink url="../classes/Control.html">Control.tz</ulink>.
In both cases&mdash;for both catching and setting interface values&mdash;note that even though the interface value is expressed as a string, the actual value
is often a number.  A slider interface element, for example, will actually 
give (and expect) a number value, but on the breve side, it will be 
expressed as a string.  steve's automatic conversion between
<function>ints</function>, <function>floats</function> and
<function>strings</function> typically takes care of this automatically.
</para></listitem>
</itemizedlist>
</para>
<para>
When the user interface element with the corresponding tag is activated, these methods 
will be called with the string value of the interface element.  In the case of most 
types of controls, like buttons or sliders, you'll generally want to use the string 
value as a number to set some parameter.
</para>
<sect2><title>Creating ".nib" Files Without Using the Included Template</title>
<para>
<indexterm><primary>nib files</primary></indexterm>
It is best to use the included template for creating your own custom nib files 
because the process for creating them from scratch can be a bit confusing.  
Nevertheless the process is described below for those who are curious: 
<itemizedlist>
<listitem><para>Launch interface builder</para></listitem>

<listitem><para>Create a new "Cocoa, Empty" nib file</para></listitem>

<listitem><para>In the document window, click on the "Classes" tab</para></listitem>

<listitem><para>Control-click on "NSObject", select the menu entry "subclass NSObject".  A new object called "MyObject" will appear--rename this object to "slBreveNibLoader"</para></listitem>

<listitem><para>With the slBreveNibLoader object selected, bring up the info window with Command-1</para></listitem>

<listitem><para>In the "Outlet" tab of this window, click add.  Name the new outlet "window".</para></listitem>

<listitem><para>Click back to the "Instances" tab of the project.  Click on "File's Owner", and type Command-5 to bring up the "Custom Class" inspector.  Find the object "slBreveNibLoader" from this list and select it.</para></listitem>

<listitem><para>Go back to the "Instances" tab of the project.  From the "Cocoa Views" palette, drag a "Window" object to the "Instances" area.</para></listitem>

<listitem><para>Select the "File's Owner" icon.  Control-click and drag from the "File's Owner" icon to the icon of the newly created window.</para></listitem>

<listitem><para>In the "File's Owner" info window that appears, select the item "window" and then click on the connect button.</para></listitem>

</itemizedlist>

</para>
</sect2>
</sect1>

</chapter>
