@use Control.

Controller GCTest.

Control : GCTest {
	+ variables:
		gh (hash).
		gl (list).
		n (int).
	
	+ to init:
		print (self test-argument-allocations with-list { new GCTesterI, { 2, 3, "dog" } }).
		print "Argument allocations complete".

		self test-local-allocations.
		print "Local allocations complete".

		self test-global-allocations.
		gl = { }.
		print "Global allocations complete".

		self test-returned-allocations.
		print "Returned allocations complete upon method return".

	+ to iterate:
		ti, tii (int).
		
		if n < 2: {
			n++.
			return.
		}

		ti = |(all GCTesterI)|.
		tii = |(all GCTesterII)|.

		print "$ti instances of GCTesterI allocated".
		print "$tii instances of GCTesterII allocated".

		if ti || tii: die "FAILURE".

		print "SUCCESS".
		self end-simulation.

	+ to test-argument-allocations with-list l (list):
		print "Testing argument allocations".
		print l.

		return "OK".

	+ to test-local-allocations:
		h (hash).
		l (list).

		print "Testing local allocations".

		h{ "123" } = new GCTesterI.
		l{0} = new GCTesterI.

		h{ "123" } = { 1, 2, 3 }.

	+ to test-global-allocations:
		print "Testing global allocations".

		gh{ "stuff" } = { 1, 2, 3 }.
		gh{ "123" } = new GCTesterI.
		gl{0} = new GCTesterI.

		gl = { "hat", "sofa", "puppydog" }.
		gl = { new GCTesterI }.

		gh{ "stuff" } = 0.
		gh{ "123" } = 0.

	+ to test-returned-allocations:
		print "Testing returned allocations".

		return new GCTesterI.
}

Object : GCTesterI {
	+ variables:
		label (int).
		test2 (object).

	+ to init:
		self enable-auto-free.
		# label = | all Objects |.
		label = random[1000].
		print "creating $self (#$label)".
		test2 = new GCTesterII.

	+ to destroy:
		print "destroying $self (#$label)".
}

Object : GCTesterII {
	+ variables:
		label (int).

	+ to init:
		# label = | all Objects |.
		label = random[1000].
		print "creating $self (#$label)".
		self enable-auto-free.

	+ to destroy:
		print "destroying $self (#$label)".
}
