@use Control.
@use PatchGrid.
@use PatchToroid.
@use PatchChemical.

@define SIZE 12.
@define DIFFUSION_RATE .09.
@define DECAY_RATE 0.0.
@define EXP_INFLOW 0.
@define LIN_INFLOW 400.
@define INFLOW_END_TIME 500.

Controller PatchGridTestControl.

Control : PatchGridTestControl {

    +variables:
        grid (object).
        expChem (object).
        linChem (object).
        index (int).
        
    + to init:
        self set-iteration-step to 1.0.
        self add-menu named "Increase Diffusion" for-method "increase-diffusion".
        self add-menu named "Decrease Diffusion" for-method "decrease-diffusion".
        self add-menu named "Increment Diffusion" for-method "increment-diffusion".        

        self point-camera at (0, 0, 0) from (-40, 16, 40).
        self set-background-color to (1, 1, 1).

        self rotate-patch-grid.
        
    + to rotate-patch-grid:
        obj (object).
        
        if expChem: free(expChem).
        if linChem: free(linChem).
        if grid: { free(grid). free((all Patches)). }

        grid = ((new PatchGrid) init-with x-count SIZE
                          y-count SIZE
                          z-count SIZE).
        expChem = ((new PatchChemical) init-with diffusion-rate DIFFUSION_RATE
                              decay-rate DECAY_RATE
                              decay-type "Exponential").
        linChem = ((new PatchChemical) init-with diffusion-rate DIFFUSION_RATE
                              decay-rate DECAY_RATE
                              decay-type "Linear").
        grid track patch-chemical expChem.
        grid track patch-chemical linChem.
        print (grid get-patch-chemicals).
        for each obj in (grid get-patch-chemicals):
        {
            print (grid get-concentration of obj at-x 0 at-y 0 at-z 0).
        }
        grid display-concentration-in-blue of-patch-chemical expChem.
        grid display-concentration-in-red of-patch-chemical linChem.

        (all Patches) set-transparency to 0.2.
        
        
        (self schedule method-call "rotate-patch-grid" at-time ((self get-time) + (300 / (self get-iteration-step)))).
                
    + to iterate:
        obj (object).
        self increment-diffusion.
        super iterate.

    + to increment-diffusion:        
        grid diffuse-chemicals.
        grid decay-chemicals.
        if (self get-time) < INFLOW_END_TIME:
        {
#            printf "Patch (SIZE - 1, SIZE - 1, SIZE - 1) has concentration: ".
#            printf ((grid get-patch-at x (SIZE - 1) y (SIZE - 1) z (SIZE - 1)) get-concentration of linChem).
#            printf " before increase and concentration ".
            (grid get-patch-at x 0 y 0 z 0) increase-concentration of expChem by EXP_INFLOW.
            (grid get-patch-at x (SIZE - 1) y (SIZE - 1) z (SIZE - 1)) increase-concentration of linChem by LIN_INFLOW.
#            printf ((grid get-patch-at x (SIZE - 1) y (SIZE - 1) z (SIZE - 1)) get-concentration of linChem).
#            print " after increase.".
        }
        grid set-patch-colors-to-chemical-concentrations.
#        for each obj in (grid get-patch-chemicals):
#        {
#            print (grid get-concentration of obj at-x (SIZE - 1) at-y 0 at-z (SIZE - 1)).
#        }


    + to increase-diffusion:
        obj (object).
        for each obj in (grid get-patch-chemicals):
        {
            obj set-diffusion-rate to ((obj get-diffusion-rate) + .01).
        }

    + to decrease-diffusion:
        obj (object).
        for each obj in (grid get-patch-chemicals):
        {
            obj set-diffusion-rate to ((obj get-diffusion-rate) - .01).
            
        }


    + to do-foo3 :
        return 0.        
}
