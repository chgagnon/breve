# 
# Symphony is your own personal evolving performance art.
#
# 1) Each object has a tune.  Use the selection tool to select objects
#	and hear their tunes.  Pick your favorite by control-clicking on
#	the selected object and selecting the "Select" menu option.
#
# 2) Your favorite object will then mutate into 3 new objects, each
#	with subtle changes to the song.  
#
# 3) Repeat!
#

@include "Mobile.tz"
@include "Control.tz"
@include "Instrument.tz"
@include "Genome.tz"

Controller Symphony.

Control : Symphony {
	+ variables:
		vibraphone (object).
		selection1, selection2 (object).
		cubes (list).
	
	+ to init:
		# make a new QT musical instrument
	
		vibraphone = (new Instrument init-as-vibraphone).
		
		self set-background-color to (.2, .2, .2).		
		self set-background-texture to (self load-image from "images/clouds.png").

		# create & build the cubes.  "build" will set them up with the 
		# proper shapes and generate an initial tune.

		cubes = 4 new Musicians.

		cubes build.

		cubes{0} drift to (.25, 0, .25).
		cubes{1} drift to (-.25, 0, .25).
		cubes{2} drift to (-.25, 0, -.25).
		cubes{3} drift to (.25, 0, -.25).
   
		self point-camera at (0, 0, 0) from (0, 1.5, 0).
		
		self enable-lighting.
		self set-light-color to (0.2, 0.2, 0.2).
		
		self set-display-message with-number 0 at-x -.95 at-y -.90 to "Select an object to hear its song." with-color (0, 0, 0).
		self set-display-message with-number 1 at-x -.95 at-y -.95 to "Select your favorite by control-clicking." with-color (0, 0, 0). 
		  
	+ to click on agent (object):
		# We override the click method from Control.tz so that we can
		# customize the behavior when an object is clicked on.

		location (vector).

		# selectedObject is actually an instance variable defined by
		# Control.tz--it's just a special case that we'll to use it 
		# for ourselves when customizing the "click" method.
		
		if selectedObject == agent: return.

		if selectedObject: {
			selectedObject hide-bounding-box.
		}
	
		if agent: {
			agent play with-instrument vibraphone.
			agent show-bounding-box.
		}

		selectedObject = agent.

	+ to select agent a (object):
		i (int).

		for i = 0, i < 4, i += 1: {
			if cubes{i} != a: {
				free cubes{i}.
				cubes{i} = new Musician.
				
				(a get-genome) copy-contents to (cubes{i} get-genome).
				(cubes{i} get-genome) mutate.
				cubes{i} build.
				
				if i == 0: cubes{0} drift to (.25, 0, .25).
				if i == 1: cubes{1} drift to (-.25, 0, .25).
				if i == 2: cubes{2} drift to (-.25, 0, -.25).
				if i == 3: cubes{3} drift to (.25, 0, -.25).
			}
		}
		
		# simulate a click on nothing (deselection).

		self click on 0.
}

# implement other objects in your simulation here

Mobile : Musician (aka Musicians) {
	+ variables:
		genome (object).
		drifting (int).
		driftLocation (vector).
		
	+ to init:
		genome = new Music.
		self add-menu named "Select" for-method "select".

	+ to build:
		self register with-shape (new PolygonDisk init-with
			 radius (genome get-radius) 
			 sides (genome get-sides) 
			 height (genome get-height)).

		self set-color to (genome get-color).
		self set-rotational-velocity to random[(.2, -.2, .2)].
 
	+ to iterate:
		if drifting: {
			self offset by .03 * (driftLocation - (self get-location)).
			if (|driftLocation - (self get-location)| < .001): {
				 self move to driftLocation.
				 drifting = 0.   
			}
		}
 
	+ to play with-instrument instrument (object):
		genome play with-instrument instrument.

	+ to get-genome:
		return genome.
		
	+ to drift to location (vector):
		drifting = 1.
		driftLocation = location.

	+ to select:
		controller select agent self.
}

Genome : Music {
	+ variables: 
		tune (16 ints).
		durations (16 doubles).
		color (vector).
		sides (int).
		radius (double).
		height (double).
	
	+ to init:
		self randomize.
		
	+ to randomize:
		counter (int).
		
		while counter < 16: {
			tune[counter] = random[16] + 60.
			durations[counter] = random[.3].
			counter+=1.
		}

		 sides = random[7] + 3.
		 radius = random[.2] + .01.
		 height = random[.3] + .01.
		 color = random[(.8, .8, .8)].

	+ to get-radius:
		return radius.
		
	+ to get-height:
		return height.

	+ to get-sides:
		return sides.

	+ to get-color:
		return color.

	+ to play with-instrument instrument (object):
		counter (int).
		while counter < 16: {
			instrument play-note number tune[counter] for-duration durations[counter].
			counter+=1.
		}

	+ to mutate:
		sides += random[3] - 1.
		if sides < 3: sides = 3.
		if sides > 40: sides = 40.

		radius += random[.2] - .1.
		if radius < .01: radius = .01.

		height += random[.2] - .1.
		if height < .01: height = .01.

		color += random[(.2, .2, .2)] - (.1, .1, .1).

	if |color| > 1.0: color /= |color|.

		tune[random[15]] += random[16] - 8.
		tune[random[15]] += random[16] - 8.
		tune[random[15]] += random[16] - 8.

		durations[random[15]] += random[.3] - .15.
		durations[random[15]] += random[.3] - .15.
		durations[random[15]] += random[.3] - .15.
}
