#
# Raytracer
# by Marc Szymanski
#
# This demo shows how raytracing can be used to implement 
# simple sensor objects.
#

# include some required breve class files


@use Control.
@use Drawing.
@use Mobile.
@use Stationary.
@use IRSensor.
@use testAgent.
#@define PI 3.141592653.
#@define PI180 0.017453293.


# First tell the breve engine the name of our controller class

Controller myControl.             

Control : myControl {
	+ variables:
		walkerShape (object).
		agent (object).
		agents (list).

	+ to init:
		s (object).
		print "Setting up the simulation.".
		s = new IRSensor.
		s register-Sensor-TEFT4300.
		free s.
		self point-camera at (0, 0, 0) from (0, 100, 0).
		walkerShape   = (new Cube init-with size (RobotSize, 2.8, RobotSize)).

#		self messageTest-block.
#		self messageTest-allSensors.
#		self messageTest-oneSensor.		
#		self sensorTest-Distance.
#		self sensorTest-Azimut distance 7.5.
#		self sensorTest-Incidence distance 12.5.
		self moveAroundTest.

	+ to moveAroundTest:
		agentcount(int).
		i(int).
		agentcount = 3.
		agents =  agentcount new testAgent.		
#		agent = new testAgent.
#		agent move to (-10,10,-10).
#		agent set-mode mode AVOID. 421.2 von 756,2 55,7%
		new DemoStage.

		for i=0, i<agentcount  , i+=1: {
			agents{i} move to (random[(10, 0, 10)]+(-15, 10, -15)).
			agents{i} rotate around-axis (0,1,0) by random[360]*PI/360.
			agents{i} set-mode mode AVOID.
		}
		
	+ to sensorTestInit:
		new TestStage.
		agent =  1 new testAgent.
		self point-camera at (0, 0, 0) from (0, 200, 0).

	+ to sensorTest-Distance:
		self sensorTestInit.
		agent set-mode mode DISTANCE.
		agent move to (0, 10, 50).
		agent rotate around-axis (0,1,0) by PI/2.
		agent set-velocity to (agent get-rotation)*(1,0,0).

	+ to sensorTest-Azimut distance dist(float):
		self sensorTestInit.
		agent set-mode mode AZIMUT.
		#-15+robotsize/2 ,0 sind waende
		agent move to (-40, 10, -dist).
		
	+ to sensorTest-Incidence distance dist(float):
		self sensorTestInit.
		agent set-mode mode INCIDENCE.
		agent set-incidenceRadius radius (dist + (1+RobotSize)/2.0). # 1= wanddicke

	+ to messageTest-block:
		radius(int).
		i(int).
		agentcount(int).
		agentcount = 0.
		radius = 40.
		agents =  (agentcount+5) new testAgent.		

		for i=0, i<agentcount  , i+=1: {
			agents{i} move to (radius*sin((360.0/agentcount)*i*PI/180.0), 0, radius*cos((360.0/agentcount)*i*PI/180.0)).
			agents{i} rotate around-axis (0,1,0) by ((360.0/agentcount)*i*PI/180.0 + PI/2.0).
			agents{i} set-mode mode STRAIGHT.
		}
		agents{agentcount} move to (0, 0, 0).
		agents{agentcount} rotate around-axis (0,-1,0) by (PI/2.0).
		agents{agentcount} set-mode mode SOURCE.

 		agents{agentcount+1} set-mode mode DISABLE.
		agents{agentcount+1} move to (3, 0, -6).
		agents{agentcount+2} set-mode mode DISABLE.
		agents{agentcount+2} move to (1, 0, -6).
		agents{agentcount+3} set-mode mode DISABLE.
		agents{agentcount+3} move to (-1, 0, -6).
		agents{agentcount+4} set-mode mode DISABLE.
		agents{agentcount+4} move to (-3, 0, -6).

	+ to messageTest-allSensors:
		radius(int).
		i(int).
		agentcount(int).
		agentcount = 60.
		radius = 40.
		agents =  (agentcount+1) new testAgent.		

		for i=0, i<agentcount  , i+=1: {
			agents{i} move to (radius*sin((360.0/agentcount)*i*PI/180.0), 0, radius*cos((360.0/agentcount)*i*PI/180.0)).
			agents{i} rotate around-axis (0,1,0) by ((360.0/agentcount)*i*PI/180.0 + PI/2.0).
			agents{i} set-mode mode STRAIGHT.
		}
		agents{agentcount} move to (0, 0, 0).
		agents{agentcount} rotate around-axis (0,-1,0) by (PI/2.0).
		agents{agentcount} set-mode mode SOURCE.

	+ to messageTest-oneSensor:
		radius(int).
		i(int).
		j(int).
		agentcount(int).
		agentcount = 40.
		radius = 40.
		agents =  (agentcount+1) new testAgent.		

		for i=0, i<agentcount , i+=1: {
			j= i+20.
			agents{i} move to (radius*sin((360.0/(agentcount+40))*j*PI/180.0), 0, radius*cos((360.0/(agentcount+40))*j*PI/180.0)).
			agents{i} rotate around-axis (0,1,0) by ((360.0/(agentcount+40))*j*PI/180.0 + PI/2.0).
			agents{i} set-mode mode STRAIGHT.
		}
		agents{agentcount} move to (0, 0, 10).
		agents{agentcount} rotate around-axis (0,-1,0) by (PI/2.0).
		agents{agentcount} set-mode mode SOURCE.


+ to iterate:
		super iterate.
		self update-neighbors.

	+ to get-walker-shape:
		return walkerShape.
}

@define FLOOR_Y 0.1.
@define COLOR (0,0.9,0.1).
@define WALL_W 1.
@define WALL_H 20.0.
@define BOUNCE 0.1.

Object : Stage {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init-with size-x FLOOR_X (double) with-size-z FLOOR_Z (double):
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (WALL_W, WALL_H, FLOOR_Z + WALL_W)).
		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (FLOOR_X/2, WALL_H/2 - FLOOR_Y/2, 0).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape0 at-location (-FLOOR_X/2, WALL_H/2 - FLOOR_Y/2, 0).
		wallS set-e to BOUNCE.
		wallS set-color to (0.5,0,0).

		wall-shape1 = (new Cube init-with size (FLOOR_X + WALL_W, WALL_H, WALL_W)).
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (0, WALL_H/2 - FLOOR_Y/2, FLOOR_Z/2).
		wallN set-e to BOUNCE.
		wallN set-color to (0.5,0,0).

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (0, WALL_H/2 - FLOOR_Y/2, -FLOOR_Z/2).
		wallS set-e to BOUNCE.
		wallS set-color to (0.5,0,0).
		
		return self.

}

Object : LabyStage2 {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init-with size-x FLOOR_X (double) with-size-z FLOOR_Z (double):
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 0).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, 30).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, 30).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (10, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (10, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		

		return self.

}

Object : LabyStage3 {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init:
		FLOOR_X (double).
		FLOOR_Z (double).
	        FLOOR_X = 100.
		FLOOR_Z = 80.
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		

		return self.

}

Object : LabyStage4 {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init:
		FLOOR_X (double).
		FLOOR_Z (double).
	        FLOOR_X = 160.
		FLOOR_Z = 120.
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
#		floor = new Stationary.
#		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
#		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		#end -- outer border 



		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.




		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (20, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (20, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		

		return self.

}

Object : LabyStage5 {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init:
		FLOOR_X (double).
		FLOOR_Z (double).
	    FLOOR_X = 160.
		FLOOR_Z = 120.
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
#		floor = new Stationary.
#		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
#		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H, 1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		#end -- outer border 




		

		return self.

}

Object : DemoStage {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init:
		floor-shape = (new Cube init-with size (45, FLOOR_Y, 55)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).

		#horizontale innenwände

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, 13).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-13, WALL_H/2 - FLOOR_Y/2, 0).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, -13).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		#horizontale Außenwände

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-13, WALL_H/2 - FLOOR_Y/2, 28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, 28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-13, WALL_H/2 - FLOOR_Y/2, -28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, -28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		#vertikale Außenwände

		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, 18.5).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, -18.5).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, 18.5).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, -18.5).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
				

		return self.
}
Object : TestStage {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wallT, wall-shape0, wall-shape1, wall-shape-test (object).

	+ to init:
		FLOOR_X (double).
		FLOOR_Z (double).
	    FLOOR_X = 160.
		FLOOR_Z = 120.
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
#		floor = new Stationary.
#		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
#		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H, 1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		#end -- outer border 


		wall-shape-test = (new Cube init-with size (10, 20,  1)).

		wallT = new Stationary.
		wallT register with-shape wall-shape-test at-location (-40, 10, -15-(RobotSize+1)/2). # +1 wegen wanddicke
		wallT set-e to BOUNCE.
		wallT set-color to COLOR.

		wallT = new Stationary.
		wallT register with-shape wall-shape-test at-location (-40, 10, (RobotSize+1)/2). # +1 wegen wanddicke
		wallT set-e to BOUNCE.
		wallT set-color to COLOR.

		wallT = new Stationary.
		wallT register with-shape wall-shape-test at-location (0, 10, 0).
		wallT set-e to BOUNCE.
		wallT set-color to COLOR.
		

		return self.

}
