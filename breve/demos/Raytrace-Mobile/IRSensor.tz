@use Object.
@use Mobile.
@use Shape.
@use Drawing.
@use Real.

@define PI 3.141592653.
@define PI180 0.017453293.
@define SENSORRANGE 30.	# The range of the IR-Cone
@define SENSORANGLE 40. # The opening angle of the IR-Cone
@define SENSORSIZE 0.0.	# The Size of the sensor Length = 2*Size

Real:IRSensor (aka IRSensors){

	+variables:
		m_location(vector).
		m_rotation(matrix).
		sensorType(string).
		sensordata(float).
		owner(object).
		realWorldPointer_owner(pointer).
		draw(object).
		rel_position(vector).
		rel_rotation(matrix).
	
	+ to register-Sensor-TEFT4300:
	  	distance (list).
		distance_factor (list).
		distance_length(int).
		azimut (list).
		azimut_factor (list).
		azimut_length(int).
		incidence (list).
		incidence_factor (list).
		incidence_length(int).
		rows(int).
		columns(int).
		maxrange (double).
		maxangle(double).
		rows = 1.
		columns = rows.
		maxrange = 40.
		maxangle = 60/PI * 180. # maximum 79
# * SensorBuilder::createSensor(const char* name, const int rows, const int columns, const double max_range, const double max_angle, 
#	*			const int distance_length, const double* distance, const double* distance_factor,
#	*			const int azimut_length, const double* azimut, const double* azimut_factor,
#	*			const int incidence_length, const double* incidence, const double* incidence_factor){
# f(x) =max*atan(s/(2*x**2))/pi*2
		distance =        { 0,    2.5,      5,    7.5,     10,  12.5,     15,   17.5,     20,    22.5,
		25,    30,     35, 40, 50, 60 }.
		distance_factor = {	1.000000000, 0.525144900, 0.168223523, 0.076190356, 0.042997372,
							0.027543040, 0.019133291, 0.014059060, 0.010764692, 0.008505740,
							0.006889790, 0.004784673, 0.000, 0.000}.
		distance_length = 16.
		
#		
		azimut = {-65*PI180, -60*PI180,  -30*PI180, -20*PI180,   -10*PI180,    0*PI180,    
				  10*PI180,  20*PI180,   30*PI180, 60*PI180, 65*PI180}.
		azimut_factor = {  0,   0, 0.55,   0.80, 0.97, 1.0, 0.97,   0.80, 0.55,  0, 0 }.
		azimut_length = 11. 

		#R2S2 7.5cm
		incidence ={-100*PI180, -90*PI180, -80*PI180, -70*PI180,  -60*PI180, -50*PI180, -40*PI180, 
					-30*PI180, -20*PI180, -10*PI180, 0*PI180, 10*PI180, 20*PI180, 30*PI180, 40*PI180, 
					50*PI180, 60*PI180, 70*PI180, 80*PI180 ,90*PI180, 100*PI180}.
		incidence_factor = {0.0, 0.0, 0.1143, 0.2857, 0.3571, 0.5000, 0.6429, 0.7143, 0.7857, 0.9286, 
							1.0, 0.9286, 0.7857, 0.7143, 0.6429, 0.5, 0.3571,0.2857, 0.1143, 0.0, 0.0}.
		incidence_length = 21.

		print "IRSensor.tz: Creating sensor TEFT4300...".
		createUserSensor("TEFT4300", rows, columns, maxrange, maxangle,
						distance_length, distance, distance_factor,
						azimut_length, azimut, azimut_factor,
						incidence_length, incidence, incidence_factor).
		print "...sensor created!".


	+ to set-rel-y-rotation to f(float):
		self set-rel-rotation to [(cos(f),0,-sin(f)),(0,1,0),(sin(f),0,cos(f))].

	+ to set-rel-rotation to m (matrix):
	    rel_rotation = m.
	
	+to set-rel-position to v (vector):
		rel_position = v+(SENSORSIZE,0,0).
	
				
	+to init-with type t(string) rel-position position(vector) rel-rotation rotation(matrix) owner o(object):
		sensorType = t.
		self set-rel-position to position.
		self set-rel-rotation to rotation.
		owner = o.
		realWorldPointer_owner = o get-realWorldPointer.
		draw = new Drawing.
		sensordata = 0.
		self update-pos.
		return self.
	
    + to set-owner to o (object):
        owner = o.
	
	+ to send message message(string)on-sensor sensor(int):
  		qtest (double).
		agents (list).
		i(object).
		col(int).
		col = random[100].
  		self update-pos.
 #		draw clear.
		agents = all testAgent.
		draw set-color to (1,0,0).
		draw draw-line from (self get-location)to (self get-location) + (self get-rotation)*(0,0,27).

		foreach i in agents: {
			if(i!= owner):{
				qtest = calculateQualityToObject(realWorldPointer_owner, (self get-location), (self get-rotation) ,(i get-realWorldPointer) , sensorType).
				draw set-color to (0,0,0).
#				draw draw-line from (self get-location)to (i get-location).
				if (qtest > 3):{ #3
#					print "sendquality:",qtest.
					i receiveMessage message message hisSensor sensor.
#					i receiveMessage message col hisSensor sensor.

#					+ to receiveMessage message message(string) on-sensor mySensor(int) hisSensor hisSensor(int) :
				}
			}
		}


	+ to move to location(vector):
		m_location = location.
	
	+ to get-location:
	  return m_location.

	+ to set-rotation to m(matrix):
	  m_rotation = m.

	+to get-rotation:
	  return m_rotation.

	+to get-data:
		self update-pos.
		if (sensordata ==-1 ):{
			draw clear.
			draw set-color to (0.1, 0.1, 0.1).
			draw draw-line from (self get-location)to (self get-location) + (self get-rotation)*(0,0,30).
#
#			print "Raytracer: start sensing...".
			sensordata = irSense(realWorldPointer_owner, (self get-location), (self get-rotation) , sensorType).
#		print realWorldPointer_owner.
#		print (self get-location).
#		print (self get-rotation).
#			print sensordata.
#			print "Raytracer: ...sensing done".
		}
		return sensordata.
		
	+to iterate:
		sensordata = -1.
		#print "iterate".
		self update-pos.
		
	+to update-pos:
		#print"update-pos".
		# move and rotate the sensor, relative to its owner
		self move to ((owner get-location) +( (owner get-rotation )* rel_position )).
		#sensorCone move to ((owner get-location) +( (owner get-rotation )* (rel_position + rel_rotation*(0,SENSORSIZE*2 + SENSORRANGE,0) ))).
		self set-rotation to ((owner get-rotation) * rel_rotation).
		#sensorCone set-rotation to ((owner get-rotation) * rel_rotation*[(1,0,0),(0,-1,0),(0,0,1)]).
}
