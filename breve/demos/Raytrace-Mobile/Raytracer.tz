#
# Raytracer
# by Marc Szymanski
#
# This demo shows how raytracing can be used to implement 
# simple sensor objects.
#

# include some required breve class files

@use Control.
@use Drawing.
@use Mobile.
@use Stationary.

# First tell the breve engine the name of our controller class

Controller myControl.             

Control : myControl {
	+ variables:
		walkerShape (object).
		agent         (object).

	+ to init:
		print "Setting up the simulation.".

		new DemoStage.
		self point-camera at (0, 0, 0) from (0, 100, 0).

		walkerShape   = (new Cube init-with size (2.53, 2.8, 2.5)).

		agent = new isAgent.
		agent move to (0, 1.8, 0).

	+ to iterate:
		super iterate.
		self update-neighbors.

	+ to get-walker-shape:
		return walkerShape.
}

@define FLOOR_Y 0.3.
@define COLOR (0,0.9,0.1).
@define WALL_W 1.
@define WALL_H 2.5.
@define BOUNCE 0.1.

Object : Stage {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init-with size-x FLOOR_X (double) with-size-z FLOOR_Z (double):
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (WALL_W, WALL_H, FLOOR_Z + WALL_W)).
		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (FLOOR_X/2, WALL_H/2 - FLOOR_Y/2, 0).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape0 at-location (-FLOOR_X/2, WALL_H/2 - FLOOR_Y/2, 0).
		wallS set-e to BOUNCE.
		wallS set-color to (0.5,0,0).

		wall-shape1 = (new Cube init-with size (FLOOR_X + WALL_W, WALL_H, WALL_W)).
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (0, WALL_H/2 - FLOOR_Y/2, FLOOR_Z/2).
		wallN set-e to BOUNCE.
		wallN set-color to (0.5,0,0).

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (0, WALL_H/2 - FLOOR_Y/2, -FLOOR_Z/2).
		wallS set-e to BOUNCE.
		wallS set-color to (0.5,0,0).
		
		return self.

}

Object : LabyStage2 {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init-with size-x FLOOR_X (double) with-size-z FLOOR_Z (double):
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 0).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, 30).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (30, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, 30).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-30, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (10, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (10, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		

		return self.

}

Object : LabyStage3 {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init:
		FLOOR_X (double).
		FLOOR_Z (double).
	        FLOOR_X = 100.
		FLOOR_Z = 80.
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-50, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		

		#return self.

}

Object : LabyStage4 {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init:
		FLOOR_X (double).
		FLOOR_Z (double).
	        FLOOR_X = 160.
		FLOOR_Z = 120.
		floor-shape = (new Cube init-with size (FLOOR_X, FLOOR_Y, FLOOR_Z)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, -60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (60, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (80, WALL_H/2 - FLOOR_Y/2, 60).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (80, WALL_H/2 - FLOOR_Y/2, -50).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		#end -- outer border 



		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, 40).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (20, WALL_H/2 - FLOOR_Y/2, -20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (40, WALL_H/2 - FLOOR_Y/2, -20).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.




		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (50, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.


		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (20, WALL_H/2 - FLOOR_Y/2, 30).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (20, WALL_H/2 - FLOOR_Y/2, -10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.

		

		#return self.

}

Object : DemoStage {
	+ variables:
		floor, floor-shape (object).
		wallN, wallS, wall-shape0, wall-shape1 (object).

	+ to init:
		floor-shape = (new Cube init-with size (45, FLOOR_Y, 55)).
		floor = new Stationary.
		floor register with-shape floor-shape at-location (0, -FLOOR_Y/2, 0).
		floor set-e to BOUNCE.

		wall-shape0 = (new Cube init-with size (20, WALL_H,  1)).
		wall-shape1 = (new Cube init-with size ( 1, WALL_H, 20)).

		#horizontale innenwände

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, 13).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-13, WALL_H/2 - FLOOR_Y/2, 0).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, -13).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		#horizontale Außenwände

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-13, WALL_H/2 - FLOOR_Y/2, 28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, 28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, 28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (-13, WALL_H/2 - FLOOR_Y/2, -28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (0, WALL_H/2 - FLOOR_Y/2, -28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallN = new Stationary.
		wallN register with-shape wall-shape0 at-location (13, WALL_H/2 - FLOOR_Y/2, -28).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.


		#vertikale Außenwände

		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, 18.5).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (23, WALL_H/2 - FLOOR_Y/2, -18.5).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, 18.5).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, 10).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
		
		wallN = new Stationary.
		wallN register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, -10).
		wallN set-e to BOUNCE.
		wallN set-color to COLOR.

		wallS = new Stationary.
		wallS register with-shape wall-shape1 at-location (-23, WALL_H/2 - FLOOR_Y/2, -18.5).
		wallS set-e to BOUNCE.
		wallS set-color to COLOR.
				

		return self.

}

Mobile : isAgent (aka isAgents) {
	+ variables:
		shapee        (object).
		sensor_front  (object).
		sensor_left_fr   (object).
		sensor_right_fr  (object).
		hoodSize      (float).
		df, dlf, drf    (float).

	+ to init:
		shapee = (controller get-walker-shape).
		self set-shape to shapee.
		self set-color to (0,1,0.3).

		hoodSize = 30.

		sensor_front    = (new Sensor init-with id 0 direction (1,0, 0) max-distance hoodSize and-owner self).
		sensor_right_fr = (new Sensor init-with id 1 direction (0.5,0, 0.87) max-distance hoodSize and-owner self).
		sensor_left_fr = (new Sensor init-with id 2 direction (0.5,0,-0.87) max-distance hoodSize and-owner self).

		self move to (0,-1.8 ,0).
		self rotate around-axis (0,1,0) by random[6.2].

		self set-neighborhood-size to hoodSize.

		self show-neighbor-lines.

		return self.

	+ to iterate:
		self set-neighborhood-size to hoodSize.

		dlf = (sensor_left_fr get-data).
		df = (sensor_front get-data).
		drf = (sensor_right_fr  get-data).

		# printf "left-f: ".
		# print dlf.
		# printf "front: ".
		# print df.
		# printf "right-f: ".
		# print drf.

		if (dlf > 10 && df > 10 && drf > 10) : {
			self set-rotational-velocity to (0, 0, 0).
			self set-velocity to (self get-rotation)*(1,0,0).		
		} else {
			if (dlf > drf) : {
				self set-rotational-velocity to (0, 1, 0).
				self set-velocity to (0,0,0).		
			} else {
				self set-rotational-velocity to (0, -1, 0).
				self set-velocity to (0,0,0).		
			}
		}  

}

Abstract : Sensor {
	+ variables:
		direction (vector).
		owner     (object).
		maxDist   (float).
		draw      (object).	 
		id        (double).

	+ to init-with id theID (double) direction theDirection (vector) max-distance theMaxDistance (float) and-owner theOwner (object):
		direction = theDirection/|theDirection|.
		owner     = theOwner.
		maxDist   = theMaxDistance.
		id        = theID.
		draw = new Drawing.
		return self.

	+ to get-data:
		item (object).
		world_dir (vector).
		location  (vector).
		hit (vector).
		min (float).
		mat (matrix).
		bestHit (vector).

		min = maxDist + 1.

		mat = (owner get-rotation).

		world_dir = mat*direction.
		location  = (owner get-location).

		foreach item in (owner get-neighbors) : {		 
			hit = (item raytrace from-location location with-direction world_dir).

			if ((hit != (0,0,0)) && (|hit| < min)) :  {
				min = |hit|. 
				bestHit = hit.
			}
		}

		draw clear.

		draw set-color to (1, 0, 0).
		draw draw-line from location to (location + bestHit).

		return (min + (random[7] - 3.5)).

}
