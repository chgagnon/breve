@use Movie.

@include "isStage.tz"
@include "isAgent.tz"

# include some required breve class files
@use Control.

# First tell the breve engine the name of our controller class
Controller myControl.             

Control : myControl {
	+ variables:
		walkerShape(object).#, irshape, wheelshape, helpwshape, puckshape   (object).
#		walkerTexture (object).
#		wallTexture (object).
		agent         (list).
		#agent2 (object).
		
	+ to init:
		self createSensor.
		print "Setting up the simulation.".

		new LabyStage5.
		self point-camera at (0, 0, 0) from (0, 300, 0).

		walkerShape   = (new Cube init-with size (2.53, 2.8, 2.5)).
		#(new Shape init-with-polygon-disk radius 2 sides 40 height 2.3).

		agent =  2 new isAgents.
		#agent move to (0, 2.8, 0).
		

	+ to createSensor:
	  	distance (list).
		distance_factor (list).
		distance_length(int).
		azimut (list).
		azimut_factor (list).
		azimut_length(int).
		incidence (list).
		incidence_factor (list).
		incidence_length(int).
		rows(int).
		columns(int).
		maxrange (double).
		maxangle(double).
		rows = 5.
		columns = 5.
		maxrange = 30.
		maxangle = 60/3.1415 * 180.
# * SensorBuilder::createSensor(const char* name, const int rows, const int columns, const double max_range, const double max_angle, 
#	*			const int distance_length, const double* distance, const double* distance_factor,
#	*			const int azimut_length, const double* azimut, const double* azimut_factor,
#	*			const int incidence_length, const double* incidence, const double* incidence_factor){

		distance =        {   0, 2.5,  5, 7.5,  10, 12.5,   15, 17.5,  20,  25,   30,   35, 40, 50 }.
		distance_factor = { 232, 146, 46,  22,  13,	8.88, 6.15, 4.48, 3.35, 2.1, 1.3, 0.92,  0, 0  }.
		distance_length = 14.
		azimut =		{-65, -60, -30, -20, -10, 0,  10,  20,  30, 60, 65}.
		azimut_factor = {  0,   0, 0.6, 0.8, 0.9, 1, 0.9, 0.8, 0.6,  0, 0 }.
		azimut_length = 11. 
		incidence =        { -80, -70,  -60,  -30,  -20, -10, 0,  10,   20,   30,   60,  70, 80 }.
		incidence_factor = { 0.5, 0.5, 0.65, 0.77, 0.85, 1.1, 1, 1.1, 0.85, 0.77, 0.65, 0.5, 0.5}.
		incidence_length = 13.
		print "Raytracer: Creating sensor...".
		createUserSensor("USERTEST", rows, columns, maxrange, maxangle,
						distance_length, distance, distance_factor,
						azimut_length, azimut, azimut_factor,
						incidence_length, incidence, incidence_factor).
		print "...sensor created!".

	+ to iterate:
		super iterate.
		self update-neighbors.

	+ to get-walker-shape:
		return walkerShape.

}

