CC	= @CC@
CXX	= @CXX@
JAR	= @JAR@
JAVAC	= @JAVAC@
LEX	= @LEX@
RANLIB	= @RANLIB@
AR	= @AR@
YACC	= @YACC@

@SET_MAKE@

CPPFLAGS	= @CPPFLAGS@ -Iinclude/breve @DEFS@
LDFLAGS		= @LDFLAGS@

EXTRACFLAGS	= -g
OPTFLAGS	= -O3 @EXTRAOPTFLAGS@

CXXFLAGS	= $(EXTRACFLAGS) -pipe -Wall -fpermissive
YFLAGS		= -d

PLATFORM	= @PLATFORM@
LPLATFORM	= $(shell echo $(PLATFORM)|tr '[A-Z]' '[a-z]'|tr -d '[0-9].-')

DMG_FILE	= breve_@VERSION@.dmg
CLI_FOLDER	= breve_@VERSION@
IDE_FOLDER	= breveIDE_@VERSION@

prefix		= @prefix@
exec_prefix	= @exec_prefix@

all: .depend lib/libbreve.a bin/breve_cli@EXE_SUFFIX@ bin/breve@EXE_SUFFIX@ \
	lib/classes/MethodFinder.jar

include simulation/Makefile
include kernel/Makefile
include graph/Makefile
include neural/Makefile
include steve/Makefile
include java/Makefile
include docBuild/Makefile
include util/Makefile
-include .depend

DEPS	:= $(SRC) bin/breve.cc bin/breve_cli.cc 
OBJ	:= $(SRC:.cc=.o)
OBJ	:= $(OBJ:.c=.o)

bin/breve@EXE_SUFFIX@: bin/breve.o $(OBJ)
	$(CXX) -o $@ $(LDFLAGS) $^ @PLUGINIMP@ @LIBS@ 

bin/breve_cli@EXE_SUFFIX@: bin/breve_cli.o $(OBJ)
	$(CXX) -o $@ $(LDFLAGS) $^ @PLUGINIMP@ @LIBS@

breve.dll: $(OBJ)
	$(CXX) @PLUGINFLAGS@ -o $@ @PLUGINIMP@ $^ @LIBS@

%.o: %.c
	$(CXX) $(CXXFLAGS) -c -o $@ $< $(CPPFLAGS) 

%.o: %.cc
	$(CXX) $(CXXFLAGS) -c -o $@ $< $(CPPFLAGS) 

%.tab.c: %.y
	$(YACC) $(YFLAGS) -o $@ $<

%.class: %.java
	$(JAVAC) $<

debug: all

optimize:
	$(MAKE) EXTRACFLAGS='$(OPTFLAGS)'

optimize_debug:
	$(MAKE) EXTRACFLAGS='-g $(OPTFLAGS)'

lib/libbreve.a: $(OBJ)
	$(AR) -cr $@ $(OBJ)
	$(RANLIB) $@

.depend:: $(DEPS)
	@echo -n "Generating dependencies... "
	@for i in $(DEPS); do echo -n `dirname $$i`/ >> .depend; \
		@MKDEP@ $(CPPFLAGS) $$i >> .depend; done
	@echo "done."

# this rule is a no-op to avoid updating .depend needlessly
# it must have commands and no prerequisites and must not touch .depend
.depend::
	@echo -n

.PHONY: clean OSX_build OSX_clean OSX_release CLI_release install

clean:
	rm -f bin/breve@EXE_SUFFIX@ bin/breve_cli@EXE_SUFFIX@
	rm -f .depend breve.dll lib/*.a
	rm -f steve/format.c steve/stevelex.c
	rm -f steve/steveparse.tab.c steve/steveparse.tab.h
	rm -f java/*.class lib/classes/*.jar
	rm -rf docBuild/docs OSX/build
	find . -name '.DS_Store' -exec rm -f {} \;
	find . -name 'core' -exec rm -f {} \;
	find . -name '.gdb*' -exec rm -f {} \;
	find . -name '*.core' -exec rm -f {} \;
	find . -name '*.o' -exec rm -f {} \;

OSX_build: optimize lib/libbreve.a
	-mkdir docs
	cd plugins; $(MAKE)
	cd OSX; xcodebuild -buildstyle Deployment CC= LIBS='@LDFLAGS@ @LIBS@'

OSX_clean: clean
	rm -f $(DMG_FILE)
	cd plugins; $(MAKE) clean
	cd OSX; xcodebuild clean
	rm -rf OSX/build plugins/*/build

OSX_release: OSX_clean
	$(MAKE) documentation
	$(MAKE) OSX_build
	rm -f $(DMG_FILE)
	rm -rf breve_image_folder
	mkdir breve_image_folder
	cp -R OSX/build/breve.app breve_image_folder
	cp OSX/README.html breve_image_folder
	cp OSX/Documentation.txt breve_image_folder
	cp Changes.html GPL.txt breve_image_folder
	mkdir breve_image_folder/plugins
	cp -R plugins/samples breve_image_folder/plugins
	cp plugins/slBrevePluginAPI.h plugins/README.txt breve_image_folder/plugins
	make_dmg.sh $(DMG_FILE) breve_image_folder/*
	rm -rf breve_image_folder

CLI_release: clean
	$(MAKE) optimize
	rm -rf $(CLI_FOLDER)
	mkdir -p $(CLI_FOLDER)/bin
	mkdir $(CLI_FOLDER)/lib
	cp bin/breve@EXE_SUFFIX@ $(CLI_FOLDER)/bin
	cp bin/breve_cli@EXE_SUFFIX@ $(CLI_FOLDER)/bin
	cp -R lib $(CLI_FOLDER)
	cp -R demos $(CLI_FOLDER)
	rm -rf $(CLI_FOLDER)/demos/Music
	mkdir $(CLI_FOLDER)/plugins
	cp -R plugins/samples $(CLI_FOLDER)/plugins
	rm -f $(CLI_FOLDER)/plugins/samples/Makefile.in
ifeq ($(PLATFORM),windows)
	cp lib/brevePlugin.a $(CLI_FOLDER)/plugins
	cp bin/glut32.dll $(CLI_FOLDER)/bin
endif
	cp plugins/slBrevePluginAPI.h plugins/README.txt $(CLI_FOLDER)/plugins
	cp Changes.html GPL.txt README.txt $(CLI_FOLDER)
	find $(CLI_FOLDER) -name CVS -prune -exec rm -rf {} \;
	find $(CLI_FOLDER) -name '.cvsignore' -prune -exec rm -rf {} \;
	rm -f breve_$(LPLATFORM)_@VERSION@.@ARCHIVE_SUFFIX@
	@ARCHIVER@ breve_$(LPLATFORM)_@VERSION@.@ARCHIVE_SUFFIX@ $(CLI_FOLDER)

WX_release: clean
	$(MAKE) optimize
	cd wx; make
	rm -rf $(IDE_FOLDER)
	mkdir $(IDE_FOLDER)
	mkdir $(IDE_FOLDER)/lib
	cp wx/breveIDE@EXE_SUFFIX@ $(IDE_FOLDER)
	-mkdir docs
	cp -R docs $(IDE_FOLDER)
	cp -R lib/classes $(IDE_FOLDER)/lib
	cp -R demos $(IDE_FOLDER)
	rm -rf $(IDE_FOLDER)/demos/Music
	mkdir $(IDE_FOLDER)/plugins
	cp -R plugins/samples $(IDE_FOLDER)/plugins
	rm -f $(IDE_FOLDER)/plugins/samples/Makefile.in
ifeq ($(PLATFORM),windows)
	cp wx/lib/brevePlugin.a $(IDE_FOLDER)/plugins
	cp bin/glut32.dll $(IDE_FOLDER)
endif
	cp plugins/slBrevePluginAPI.h plugins/README.txt $(IDE_FOLDER)/plugins
	cp Changes.html GPL.txt README.txt $(IDE_FOLDER)
	find $(IDE_FOLDER) -name CVS -prune -exec rm -rf {} \;
	find $(IDE_FOLDER) -name '.cvsignore' -prune -exec rm -rf {} \;
	rm -f breveIDE_$(LPLATFORM)_@VERSION@.@ARCHIVE_SUFFIX@
	@ARCHIVER@ breveIDE_$(LPLATFORM)_@VERSION@.@ARCHIVE_SUFFIX@ $(IDE_FOLDER)

install: optimize
	mkdir -p @bindir@
	cp bin/breve @bindir@
	cp bin/breve_cli @bindir@
	mkdir -p @libdir@/breve
	rm -rf @libdir@/breve/classes
	cp -R lib/classes @libdir@/breve
