@use Object.


Object : Matrix (aka Matricies) {
    % Matrix2D objects store an arbitrary sized 2D grid of arbitrary floating 
    % point data.
    % <P>
    % Several of these matrix operations are built on top of the BLAS library
    % and may be hardware accelerated on certain processors if the platform
    % provides a hardware accelerated BLAS library.  In particular, AltiVec 
    % acceleration is provided on G4 processors with Mac OS X.  
    % <P>
    % Hardware accelerated methods sometimes preform multiple operations 
    % simultaneously for the same computational cost.  The METHOD(add)
    % operation, for example, also scales one of the matrices being added.
    % When using these methods, it is often beneficial to structure code
    % to take advantage of all of the operations preformed.  It is far 
    % more efficient to scale and add a matrix simultaneously using METHOD(add)
    % than to first scale using METHOD(scale) and then add using METHOD(add).
    % <P>
    % Technical note: matrix objects are implemented using single precision 
    % floats, while much of the rest of the breve simulation environment uses 
    % double precision floating point math.

    + variables:
        matrixPointer (pointer).

    - to get-matrix-pointer:
        return matrixPointer.

}

Matrix : Matrix2D (aka Matrices2D) {

	+ to init:
		matrixPointer = matrix2DNew(32, 32).
        return self.
                
    + to init-with x-size xSize (int) y-size ySize (int): 
        self set-size x xSize y ySize.

	+ to set-size x xSize (int) y ySize (int):
		% Sets the size of this matrix to (xSize, ySize).        
        matrix2DFree(matrixPointer).
        matrixPointer = matrix2DNew(xSize, ySize).

   + to get-absolute-sum:
        % Returns the sum of the absolute values of all elements in this 
        % matrix.
        % <P>
        % This method is hardware accelerated where supported.

        return matrix2DGetAbsoluteSum(matrixPointer).

    + to multiply-with-values of otherMatrix (Matrix2D object):
        % Multiplies each element in this matrix with the corresponding 
        % element in otherMatrix.  This is not regular matrix multiplication;
        % rather, it is a way to scale each element in otherMatrix.

        matrix2DMulElements(matrixPointer, (otherMatrix get-matrix-pointer)).

	+ to set-all-values to value (float):
		% Sets all of the values in the matrix to value.

		matrix2DSetAll(matrixPointer, value).

	+ to get-value at-x x (int) at-y y (int):
		% Returns the matrix value at position (x, y).

		return matrix2DGet(matrixPointer, x, y).

	+ to set-value to value (double) at-x x (int) at-y y (int):
		% Sets the matrix value at position (x, y).

		return matrix2DSet(matrixPointer, x, y, value).

	+ to add-scalar value scalarValue (double):
		% Adds the number scalarValue to each element in the matrix.
		
		matrix2DAddScalar(matrixPointer, scalarValue).

	+ to add-values of otherMatrix (object) scaled-by scale = 1.0 (double):
		% Adds this matrix to otherMatrix leaving the result in otherMatrix.
		% The matrices must be of the same size.  The 
		% optional argument scale allows otherMatrix to be scaled before 
		% adding it to this matrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix2DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), scale).

	+ to scale by scaleValue (float):
		% Scales all elements in the matrix by scaleValue.
		% <P>
		% This method is hardware accelerated where supported.

		matrix2DScale(matrixPointer, scaleValue).

	+ to copy from otherMatrix (object):
		% Copies the contents of otherMatrix to thisMatrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix2DCopy((otherMatrix get-matrix-pointer), matrixPointer).

    + to subtract-values of otherMatrix (object) scaled-by scale = 1.0 (double):
        % Subtracts this matrix from this otherMatrix, leaving the result
        % in otherMatrix.  This method uses the
        % same mechanism as METHOD(add), but using a negative scale 
        % argument.
        % The optional argument scale allows otherMatrix to be scaled before 
        % subtracting it from this matrix.
        % <P>
        % This method is hardware accelerated where supported.

        matrix2DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), -1.0 * scale).

    + to compute-periodic-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
        % Sets the contents of this matrix to a diffusion rate from the matrix
        % chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
        % chemical concentrations, and the resulting diffusion matrix gives the 
        % approximate rates of diffusion of the chemical.
        % <P>
        % This is done by sampling each concentration's local neighborhood 
        % according to the following matrix:
        % <pre>
        % 0 1 0
        % 1 -4 1
        % 0 1 0
        % </pre>
        % <P>
        % chemicalMatrix is assumed to have periodic boundary conditions so that     
        % the chemical will flow freely from the edges of the matrix to the 
        % other side.
        % <P>
        % The optional scale argument may be used to scale the resulting scale 
        % matrix.

        matrix2DDiffusePeriodic((chemicalMatrix get-matrix-pointer), matrixPointer, scale).

    + to compute-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
        % Sets the contents of this matrix to a diffusion rate from the matrix
        % chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
        % chemical concentrations, and the resulting diffusion matrix gives the 
        % approximate rates of diffusion of the chemical.
        % <P>
        % This is done by sampling each concentration's local neighborhood 
        % according to the following matrix:
        % <pre>
        % 0 1 0
        % 1 -4 1
        % 0 1 0
        % </pre>
        % <P>
        % chemicalMatrix is assumed to have real boundary conditions so that     
        % the chemical will not flow beyond the edges of the matrix.
        % <P>
        % The optional scale argument may be used to scale the resulting scale 
        % matrix.

        matrix2DDiffuse((chemicalMatrix get-matrix-pointer), matrixPointer, scale).

    + to copy-to-red-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
        % Copies the contents of this matrix to the red channel of theImage.  
        % The optional
        % argument scale specifies how the matrix elements should be scaled.
        % <P>
        % This method, and it's counterparts METHOD(copy-to-green-channel) and 
        % METHOD(copy-to-blue-channel) are far faster than looping manually through
        % the matrix values.

        matrix2DCopyToImage(matrixPointer, (theImage get-image-data), 0, scale).

    + to copy-to-green-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
        % Copies the contents of this matrix to the green channel of theImage.  
        % The optional
        % argument scale specifies how the matrix elements should be scaled.
        % <P>
        % This method, and it's counterparts METHOD(copy-to-blue-channel) and 
        % METHOD(copy-to-red-channel) are far faster than looping manually through
        % the matrix values.

        matrix2DCopyToImage(matrixPointer, (theImage get-image-data), 1, scale).

    + to copy-to-blue-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
        % Copies the contents of this matrix to the blue channel of theImage.  
        % The optional
        % argument scale specifies how the matrix elements should be scaled.
        % <P>
        % This method, and it's counterparts METHOD(copy-to-red-channel) and 
        % METHOD(copy-to-green-channel) are far faster than looping manually through
        % the matrix values.

        matrix2DCopyToImage(matrixPointer, (theImage get-image-data), 2, scale).
}

Matrix : Matrix3D (aka Matrices3D) {
    % Matrix3D objects store an arbitrary sized 3D grid of arbitrary floating 
    % point data.
    % <P>
    % Several of these matrix operations are built on top of the BLAS library
    % and may be hardware accelerated on certain processors if the platform
    % provides a hardware accelerated BLAS library.  In particular, AltiVec 
    % acceleration is provided on G4 an G5 processors with Mac OS X.  
    % <P>
    % Hardware accelerated methods sometimes preform multiple operations 
    % simultaneously for the same computational cost.  The METHOD(add)
    % operation, for example, also scales one of the matrices being added.
    % When using these methods, it is often beneficial to structure code
    % to take advantage of all of the operations preformed.  It is far 
    % more efficient to scale and add a matrix simultaneously using METHOD(add)
    % than to first scale using METHOD(scale) and then add using METHOD(add).
    % <P>
    % Technical note: matrix objects are implemented using single precision 
    % floats, while much of the rest of the breve simulation environment uses 
    % double precision floating point math.

	+ to init:
		matrixPointer = matrix3DNew(32, 32, 32).
        return self.
        
    + to init-with x-size xSize (int) y-size ySize (int) z-size zSize (int): 
        self set-size x xSize y ySize z zSize.
        return self.
        
    + to set-size x xSize (int) y ySize (int) z zSize (int):
        % Sets the size of this matrix to (xSize, ySize, zSize).

        matrix2DFree(matrixPointer).
        matrixPointer = matrix3DNew(xSize, ySize, zSize).

    + to get-absolute-sum:
        % Returns the sum of the absolute values of all elements in this 
        % matrix.
        % <P>
        % This method is hardware accelerated where supported.

        return matrix3DGetAbsoluteSum(matrixPointer).

    + to multiply-with-values of otherMatrix (Matrix3D object):
        % Multiplies each element in this matrix with the corresponding 
        % element in otherMatrix.  This is not regular matrix multiplication;
        % rather, it is a way to scale each element in otherMatrix.

        matrix3DMulElements(matrixPointer, (otherMatrix get-matrix-pointer)).

    + to get-value at-x x (int) at-y y (int) at-z z (int):
        % Returns the matrix value at position (x, y, z).
        
        return matrix3DGet(matrixPointer, x, y, z).

    + to set-value to value (double) at-x x (int) at-y y (int) at-z z (int):
        % Sets the matrix value at position (x, y, z).

        return matrix3DSet(matrixPointer, x, y, z, value).

	+ to set-all-values to value (float):
		% Sets all of the values in the matrix to value.

		matrix2DSetAll(matrixPointer, value).

    + to add-scalar value scalarValue (double):
        % Adds the number scalarValue to each element in the matrix.
        
        matrix3DAddScalar(matrixPointer, scalarValue).

    + to add-values of otherMatrix (object) scaled-by scale = 1.0 (double):
        % Adds this matrix to otherMatrix leaving the result in otherMatrix.
        % The matrices must be of the same size.  The 
        % optional argument scale allows otherMatrix to be scaled before 
        % adding it to this matrix.
        % <P>
        % This method is hardware accelerated where supported.

        matrix3DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), scale).

    + to subtract-values of otherMatrix (object) scaled-by scale = 1.0 (double):
        % Subtracts this matrix from this otherMatrix, leaving the result
        % in otherMatrix.  This method uses the
        % same mechanism as METHOD(add), but using a negative scale 
        % argument.
        % The optional argument scale allows otherMatrix to be scaled before 
        % subtracting it from this matrix.
        % <P>
        % This method is hardware accelerated where supported.

        matrix3DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), -1.0 * scale).

    + to scale by scaleValue (float):
        % Scales all elements in the matrix by scaleValue.
        % <P>
        % This method is hardware accelerated where supported.

        matrix3DScale(matrixPointer, scaleValue).

    + to copy from otherMatrix (object):
        % Copies the contents of otherMatrix to thisMatrix.
        % <P>
        % This method is hardware accelerated where supported.

        matrix3DCopy((otherMatrix get-matrix-pointer), matrixPointer).

    + to compute-periodic-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
        % Sets the contents of this matrix to a diffusion rate from the matrix
        % chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
        % chemical concentrations, and the resulting diffusion matrix gives the 
        % approximate rates of diffiusion of the chemical.
        % <P>
        % This is done by sampling each concentration's local neighborhood 
        % according to the following matrix:
        % <pre>
        % 0 0 0  0 1 0  0 0 0
        % 0 1 0  1-6 1  0 1 0
        % 0 0 0  0 1 0  0 0 0
        % </pre>
        % <P>
        % chemicalMatrix is assumed to have periodic boundary conditions so that     
        % the chemical will flow freely from the edges of the matrix to the 
        % other side.
        % <P>
        % The optional scale argument may be used to scale the resulting scale 
        % matrix.

        matrix3DDiffusePeriodic((chemicalMatrix get-matrix-pointer), matrixPointer, scale).
        
    + to compute-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
        % Sets the contents of this matrix to a diffusion rate from the matrix
        % chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
        % chemical concentrations, and the resulting diffusion matrix gives the 
        % approximate rates of diffiusion of the chemical.
        % <P>
        % This is done by sampling each concentration's local neighborhood 
        % according to the following matrix:
        % <pre>
        % 0 0 0  0 1 0  0 0 0
        % 0 1 0  1-6 1  0 1 0
        % 0 0 0  0 1 0  0 0 0
        % </pre>
        % <P>
        % chemicalMatrix is assumed to have real boundary conditions so that     
        % the chemical will not flow beyond the edges of the matrix.
        % <P>
        % The optional scale argument may be used to scale the resulting scale 
        % matrix.

        matrix3DDiffuse((chemicalMatrix get-matrix-pointer), matrixPointer, scale).
        
    + to copy-to-red-channel z-plane thePlane (int) of-image theImage (Image object) with-scale scale = 1.0 (float):
        % Copies the contents of this matrix to the red channel of theImage.  
        % The optional
        % argument scale specifies how the matrix elements should be scaled.
        % <P>
        % This method, and it's counterparts METHOD(copy-to-green-channel) and 
        % METHOD(copy-to-blue-channel) are far faster than looping manually through
        % the matrix values.

        matrix3DCopyToImage(matrixPointer, thePlane, (theImage get-image-data), 0, scale).

    + to copy-to-green-channel z-plane thePlane (int) of-image theImage (Image object) with-scale scale = 1.0 (float):
        % Copies the contents of this matrix to the green channel of theImage.  
        % The optional
        % argument scale specifies how the matrix elements should be scaled.
        % <P>
        % This method, and it's counterparts METHOD(copy-to-blue-channel) and 
        % METHOD(copy-to-red-channel) are far faster than looping manually through
        % the matrix values.

        matrix3DCopyToImage(matrixPointer, thePlane, (theImage get-image-data), 1, scale).

    + to copy-to-blue-channel z-plane thePlane (int) of-image theImage (Image object) with-scale scale = 1.0 (float):
        % Copies the contents of this matrix to the blue channel of theImage.  
        % The optional
        % argument scale specifies how the matrix elements should be scaled.
        % <P>
        % This method, and it's counterparts METHOD(copy-to-red-channel) and 
        % METHOD(copy-to-green-channel) are far faster than looping manually through
        % the matrix values.

        matrix3DCopyToImage(matrixPointer, thePlane, (theImage get-image-data), 2, scale).


}
