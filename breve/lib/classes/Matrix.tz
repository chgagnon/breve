@use Object.

Object : Matrix2D (aka Matrices2D) {
	% Matrix2D objects store an arbitrary sized 2D grid of arbitrary floating 
	% point data.
	% <P>
	% Several of these matrix operations are built on top of the BLAS library
	% and may be hardware accelerated on certain processors if the platform
	% provides a hardware accelerated BLAS library.  In particular, AltiVec 
	% acceleration is provided on G4 processors with Mac OS X.  
	% <P>
	% Hardware accelerated methods sometimes preform multiple operations 
	% simultaneously for the same computational cost.  The METHOD(add)
	% operation, for example, also scales one of the matrices being added.
	% When using these methods, it is often beneficial to structure code
	% to take advantage of all of the operations preformed.  It is far 
	% more efficient to scale and add a matrix simultaneously using METHOD(add)
	% than to first scale using METHOD(scale) and then add using METHOD(add).
	% <P>
	% Technical note: matrix objects are implemented using single precision 
	% floats, while much of the rest of the breve simulation environment uses 
	% double precision floating point math.

	+ variables:
		matrixPointer (pointer).

	+ to init:
		matrixPointer = matrixNew(10, 10).

	+ to set-size x xSize (int) y ySize (int):
		% Sets the size of this matrix to (xSize, ySize).

		matrixPointer = matrixNew(xSize, ySize).

	- to get-matrix-pointer:
		return matrixPointer.

	+ to get-absolute-sum:
		% Returns the sum of the absolute values of all elements in this 
		% matrix.
		% <P>
		% This method is hardware accelerated where supported.

		return matrixGetAbsoluteSum(matrixPointer).

	+ to multiply-with-values of otherMatrix (Matrix2D object):
		% Multiplies each element in this matrix with the corresponding 
		% element in otherMatrix.  This is not regular matrix multiplication;
		% rather, it is a way to scale each element in otherMatrix.

		matrixMulElements(matrixPointer, (otherMatrix get-matrix-pointer)).

	+ to get-value at-x x (int) at-y y (int):
		% Returns the matrix value at position (x, y).

		return matrixGet(matrixPointer, x, y).

	+ to set-value to value (double) at-x x (int) at-y y (int):
		% Sets the matrix value at position (x, y).

		return matrixSet(matrixPointer, x, y, value).

	+ to add-scalar value scalarValue (double):
		% Adds the number scalarValue to each element in the matrix.
		
		matrixAddScalar(matrixPointer, scalarValue).

	+ to add-values of otherMatrix (object) scaled-by scale = 1.0 (double):
		% Adds this matrix to otherMatrix leaving the result in otherMatrix.
		% The matrices must be of the same size.  The 
		% optional argument scale allows otherMatrix to be scaled before 
		% adding it to this matrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrixAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), scale).

	+ to subtract-values of otherMatrix (object) scaled-by scale = 1.0 (double):
		% Subtracts this matrix from this otherMatrix, leaving the result
		% in otherMatrix.  This method uses the
		% same mechanism as METHOD(add), but using a negative scale 
		% argument.
		% The optional argument scale allows otherMatrix to be scaled before 
		% subtracting it from this matrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrixAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), -1.0 * scale).

	+ to scale by scaleValue (float):
		% Scales all elements in the matrix by scaleValue.
		% <P>
		% This method is hardware accelerated where supported.

		matrixScale(matrixPointer, scaleValue).

	+ to copy from otherMatrix (object):
		% Copies the contents of otherMatrix to thisMatrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrixCopy((otherMatrix get-matrix-pointer), matrixPointer).

	+ to compute-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
		% Sets the contents of this matrix to a diffusion rate from the matrix
		% chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
		% chemical concentrations, and the resulting diffusion matrix gives the 
		% approximate rates of diffiusion of the chemical.
		% <P>
		% This is done by sampling each concentration's local neighborhood 
		% according to the following matrix:
		% <pre>
		% 0 1 0
		% 1 4 1
		% 0 1 0
		% </pre>
		% <P>
		% chemicalMatrix is assumed to have periodic boundary conditions so that 	
		% the chemical will flow freely from the edges of the matrix to the 
		% other side.
		% <P>
		% The optional scale argument may be used to scale the resulting scale 
		% matrix.

		matrixDiffusePeriodic((chemicalMatrix get-matrix-pointer), matrixPointer, scale).

	+ to copy-to-red-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the red channel of theImage.  
		% The optional
		% argument scale specifies how the matrix elements should be scaled.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-green-channel) and 
		% METHOD(copy-to-blue-channel) are far faster than looping manually through
		% the matrix values.

		matrixCopyToImage(matrixPointer, (theImage get-image-data), 0, scale).

	+ to copy-to-green-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the green channel of theImage.  
		% The optional
		% argument scale specifies how the matrix elements should be scaled.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-blue-channel) and 
		% METHOD(copy-to-red-channel) are far faster than looping manually through
		% the matrix values.

		matrixCopyToImage(matrixPointer, (theImage get-image-data), 1, scale).

	+ to copy-to-blue-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the blue channel of theImage.  
		% The optional
		% argument scale specifies how the matrix elements should be scaled.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-red-channel) and 
		% METHOD(copy-to-green-channel) are far faster than looping manually through
		% the matrix values.

		matrixCopyToImage(matrixPointer, (theImage get-image-data), 2, scale).
}
