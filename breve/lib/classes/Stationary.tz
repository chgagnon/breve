@include "Real.tz"
@include "MenuItem.tz"

Real : Stationary (aka Stationaries) [version 2.0] {
    % Stationary objects are objects such as floors and walls that may 
    % collide with other objects but will never move.  Stationary objects
    % require much less computation than OBJECT(Mobile) objects, so it is 
    % always preferable to use a Stationary object when you know that an
	% object will not need to move during a simulation.
	% <P>
	% To setup a stationary object, you'll need to associate it with a
	% OBJECT(Shape) object using the method METHOD(register).

    + variables:
        color (vector).
		shadowCatcher (int).

        objectLocation (vector).
		shape (object).

  + section "Setting Up the Stationary Object"

    + to register with-shape theShape (object) at-location theLocation = (0, 0, 0) (vector):
        % Registers a stationary object using shape theShape at the location
        % specified by theLocation.

        if !(theShape is a "Shape"):
            die "method 'register' expects a Shape object ($theShape).".

        if !(theShape get-pointer):
            die "attempt to register Stationary object with uninitialized Shape.".

		shape = theShape.
		self add-dependency on shape.

        objectLocation = theLocation.
        realWorldPointer = addStationary((theShape get-pointer), theLocation).
        self set-texture to 0.

		return self.

    + to get-location:
        % Returns the location of the Stationary object.

        return objectLocation.

    - to get-world-object:
        % Used internally to get the pointer to the world.  Do not use this method
        % in user simulations.

        return realWorldPointer.

  + section "Changing the Appearence of the Object"

    + to catch-shadows:
        % Informs this object that it should display shadows (and/or reflections) 
        % of Mobile objects.  The shadows and reflections will always be shown on
        % the plane of the object pointing upwards on the Y axis--that is to say,
        % the plane with normal (0, 1, 0).  If the object does not have a plane
        % with normal (0, 1, 0), the shadows and reflections will not be displayed
        % correctly.  This method must be used in conjunction with the method 
		% OBJECTMETHOD(Control:enable-shadows).
		% <P>
		% Before using this method, you should also refer to an improved shadowing
		% technique outlined in OBJECTMETHOD(Control.tz:enable-shadow-volumes).  

        if !realWorldPointer: 
            die "method 'catch-shadows' cannot be called before Stationary object is registered.".

		shadowCatcher = 1.

        setShadowCatcher(realWorldPointer, (0, 1, 0)).
        controller set-floor-defined.

    + to set-color to newColor (vector):
        % Sets the color of the Stationary object to newColor.  Textures 
        % override color settings, so be sure to set the texture to -1 
        % using the Real.tz method set-texture if you want a flat color 
        % to be displayed--the texture is on by default for stationary 
        % objects.
        % <p>
        % The vector elements of newColor are interpreted as red, green, 
        % and blue values, on a scale from 0.0 to 1.0.  
        % <p>
        % <b>The Stationary object must be registered in the world before
        % calling this method.  See METHOD(register).</b>

        if !realWorldPointer: die "method 'set-color' cannot be called before Stationary object is registered.".

        color = newColor.
        setColor(realWorldPointer, color).

    + to get-color:
        % Returns the color of the Stationary object.

        return color.

    + to archive:
        return 1.

    + to dearchive:
        self register with-shape shape at-location objectLocation.
        if shadowCatcher: self catch-shadows.
        return 1.
}

Stationary : Floor {
	% A floor is a special case of the class OBJECT(Stationary).  It is a box of size 
	% (1000, 5, 1000) with location (0, -2.5, 0), such that the ground plane is placed
	% at Y = 0.

	+ to init:
		self register with-shape (new Cube init-with size (1000, 5, 1000)) at-location (0, -2.5, 0).
}
