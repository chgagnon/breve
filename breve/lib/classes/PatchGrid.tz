@use Abstract.
@use Patch.
@use Matrix.

Abstract : PatchGrid [version 2.2] {
    % OBJECT(PatchGrid) is a class which allows you to create "patches".  
    % A OBJECT(Patch) is a non-physical object which is associated with 
    % a specific area in the 3D world.  This allows you to associate 
    % information or actions with specific areas in space, such as the 
    % presence of a chemical or nutrient at that area.
    % <p>
    % Use METHOD(init-with) or METHOD(init-at) the create a PatchGrid.

    + variables:
        gridPointer (pointer).
        patches (list).
        location, patchSize (vector).
        patchVolume (float).
        xSize, ySize, zSize (int).
        chemicals (list).
        linearlyDecayingChemicals (list).
        exponentiallyDecayingChemicals (list).
        diffusingChemicals (list).
        chemicalConcentrationMatrix (hash).
        tempMatrix (pointer).
        redChemicalMatrix, greenChemicalMatrix, blueChemicalMatrix (object).

    - to get-grid-pointer:
        return gridPointer.
        
    + to init-with 
        location center = (0, 0, 0) (vector)
        patch-size pSize = (1, 1, 1) (vector) 
        x-count x (int) 
        y-count y (int) 
        z-count z (int) 
        patch-class class = "Patch" (string):

        % Creates a PatchGrid centered at center, in which each OBJECT(Patch) 
        % is a member of class and is the size pSize and in which the total grid 
        % dimensions are x by y by z.  
        % <p> 
        % Bear in mind that this will create a large number of objects: 
        % x * y * z.  If you have an iterate method in your patch-class, 
        % then this can amount to a great deal of computation which can
        % slow down your simulation.

        return (self init-at location center with-patch-size pSize
                                                with-x-count x
                                                with-y-count y
                                                with-z-count z
                                                with-patch-class class).

    - to init-at location gridCenter = (0, 0, 0) (vector) 
        with-patch-size pSize = (1, 1, 1) (vector) 
        with-x-count x (int) 
        with-y-count y (int) 
        with-z-count z (int) 
        with-patch-class class = "Patch" (string):

        xCount, yCount, zCount (int).

        patch (object).

        xSize = x.
        ySize = y.
        zSize = z.

        patchSize = pSize.
        patchVolume = (patchSize::x * patchSize::y * patchSize::z).

        location = gridCenter.

        gridPointer = newPatchGrid(gridCenter, patchSize, x, y, z).

        xCount = 0.
        yCount = 0.
        zCount = 0.

        while xCount < x: {
            yCount = 0.

            while yCount < y: {

                zCount = 0.

                while zCount < z: {
                    patch = (controller make-new-instance of-class class).
                    patch init-with grid-patch self x-pos xCount y-pos yCount z-pos zCount.
                    push patch onto patches.

                    setPatchObjectAtIndex(gridPointer, patch, xCount, yCount, zCount).

                    patch set-patch-pointer to patchAtIndex(gridPointer, xCount, yCount, zCount).
                    self add-dependency on patch.

                    zCount += 1.
                }

                yCount += 1.
            }

            xCount += 1.
        }

        xCount = 0.
        yCount = 0.
        zCount = 0.

        while xCount < x: {
            yCount = 0.

            while yCount < y: {

                zCount = 0.

                while zCount < z: {
                    patchObjectAtIndex(gridPointer, xCount, yCount, zCount) init-neighbors.
                    patchObjectAtIndex(gridPointer, xCount, yCount, zCount) init-patch.
                    zCount += 1.
                }

                yCount += 1.
            }

            xCount += 1.
        }

        tempMatrix = matrix3DNew(x, y, z).
        return self.

    + to enable-smooth-drawing:
        % Enables smooth drawing for this PatchGrid.  When smooth drawing is 
        % enabled, colors are blended smoothly between patches.  Smooth drawing
        % is disabled by default.
        % <P>
        % Smooth drawing is desirable when a PatchGrid's colors display 
        % continuous gradients as with chemicals or temperature, but is 
        % undesirable when dealing with discrete states, as in cellular 
        % automata simulations.
        % <P>
        % The method METHOD(disable-smooth-drawing) can be used to disable
        % smooth drawing.

        patchGridSetSmoothDrawing(gridPointer, 1).

    + to disable-smooth-drawing:
        % Disables smooth drawing for this PatchGrid.  This is the default.
        % See METHOD(enable-smooth-drawing) for details on smooth drawing.

        patchGridSetSmoothDrawing(gridPointer, 0).

    + to get-x-count:
        % If the grid is initialized, returns the size of the grid on the X-axis.
        return xSize.

    + to get-y-count:
        % If the grid is initialized, returns the size of the grid on the Y-axis.
        return ySize.

    + to get-z-count:
        % If the grid is initialized, returns the size of the grid on the Z-axis.
        return zSize.

    + to get-patch-size:
        % Returns the vector size of a single patch.

        return patchSize.

    + to get-patch-at x xind (int) y yind (int) z zind (int):
        % Returns the patch object associated with the specified indices.  Note
        % that this method may return a NULL object in the case that the 
        % indices given are out of bounds.

        return patchObjectAtIndex(gridPointer, xind, yind, zind).

    + to get-patch at-location theLocation (vector):
        % Returns the OBJECT(Patch) in which theLocation resides.  Make sure you
        % test for the validity of the returned object, since it is possible that
        % there is no patch at the specified location.

        return objectAtLocation(gridPointer, theLocation).

    + to get-patches:
        % Returns a list of all patch objects.

        return patches.

    # DIFFUSABLES
    
    - to track patch-chemical theDiffusable (object):
        % Adds a new OBJECT(PatchChemical) to the patch grid.  This allows
        % the patch grid to track the concentrations of the chemcial in
        % each patch and allow diffusion between the patches.

        if (chemicalConcentrationMatrix{theDiffusable}): {
            print "$theDiffusable is already being tracked by the PatchGrid.".
            return.
        }

        push theDiffusable onto chemicals.

        if (theDiffusable decay-is-linear): push theDiffusable onto linearlyDecayingChemicals.
        else: if (theDiffusable decay-is-exponential): push theDiffusable onto exponentiallyDecayingChemicals.

        if (theDiffusable get-diffusion-rate) > 0.0: push theDiffusable onto diffusingChemicals.

        chemicalConcentrationMatrix{theDiffusable} = ((new Matrix3D) init-with 
            x-size (self get-x-count)
            y-size (self get-y-count)
            z-size (self get-z-count)).
        
    - to untrack patch-chemical theDiffusable (object):
        % Removes a OBJECT(PatchChemcial) from the patch grid.
        chem (object).
        newChems (list).
        
        if (chemicalConcentrationMatrix{theDiffusable}): {
            free chemicalConcentrationMatrix{theDiffusable}.

            for each chem in chemicals:
              if chem != theDiffusable: push chem onto newChems.
            chemicals = newChems.
            for each chem in diffusingChemicals:
              if chem != theDiffusable: push chem onto newChems.
            diffusingChemicals = newChems.
            for each chem in linearlyDecayingChemicals:
              if chem != theDiffusable: push chem onto newChems.
            linearlyDecayingChemicals = newChems.
            for each chem in exponentiallyDecayingChemicals:
              if chem != theDiffusable: push chem onto newChems.
            exponentiallyDecayingChemicals = newChems.
        }
    
    - to display-concentration-in-red of-patch-chemical theDiffusable (object):
        % Selects the OBJECT(PatchChemical)'s concentration to use as the red
        % channel when METHOD(display-patch-chemical-concentrations) is called.

        redChemicalMatrix = chemicalConcentrationMatrix{theDiffusable}.
        
    - to display-concentration-in-green of-patch-chemical theDiffusable (object):
        % Selects the OBJECT(PatchChemical)'s concentration to use as the red
        % channel when METHOD(display-patch-chemical-concentrations) is called.

        greenChemicalMatrix = chemicalConcentrationMatrix{theDiffusable}.
                
    - to display-concentration-in-blue of-patch-chemical theDiffusable (object):
        % Selects the OBJECT(PatchChemical)'s concentration to use as the red
        % channel when METHOD(display-patch-chemical-concentrations) is called.
        blueChemicalMatrix = theDiffusable.

        blueChemicalMatrix = chemicalConcentrationMatrix{theDiffusable}.
                   
    - to set-patch-colors-to-chemical-concentrations:
        color (vector).
        color = (0,0,0).

        matrix3DSetAll(tempMatrix, 0.0).

        if redChemicalMatrix: {
            patchGridCopyColorFrom3DMatrix(gridPointer, (redChemicalMatrix get-matrix-pointer), 0, 1.0).
            matrix3DAddScaled(tempMatrix, (redChemicalMatrix get-matrix-pointer), .33).
        }

        if greenChemicalMatrix: {
            patchGridCopyColorFrom3DMatrix(gridPointer, (greenChemicalMatrix get-matrix-pointer), 1, 1.0).
            matrix3DAddScaled(tempMatrix, (greenChemicalMatrix get-matrix-pointer), .33).
        }

        if blueChemicalMatrix: {
            patchGridCopyColorFrom3DMatrix(gridPointer, (blueChemicalMatrix get-matrix-pointer), 2, 1.0).
            matrix3DAddScaled(tempMatrix, (blueChemicalMatrix get-matrix-pointer), .33).
        }

        patchGridCopyColorFrom3DMatrix(gridPointer, tempMatrix, 3, 1.0).

    - to get-patch-chemicals:
        % Returns all the chemicals currently being tracked in
        % the patch grid.
        return chemicals.
        
    - to update-concentrations:
        % Updates the concentrations of each OBJECT(PatchChemical) being
        % tracked in the patch grid.  All chemicals with a diffusion rate
        % greater than 0 diffuse into adjacent patches at their given rate
        % and all chemicals with a decay rate greater than 0 decay.
        self diffuse-chemicals.
        self decay-chemicals.
        
    - to diffuse-chemicals:
        % Updates the concentration of each OBJECT(PatchChemical) being tracked
        % in the patch grid by diffusing the chemicals according to their
        % diffusion rates.  This method is called automatically by METHOD(update-concentrations). 
        chem (object).
        chemMatrixPointer (pointer).
        
        for each chem in diffusingChemicals: {
            chemMatrixPointer = (chemicalConcentrationMatrix{chem} get-matrix-pointer).
            matrix3DDiffuse(chemMatrixPointer, tempMatrix, (chem get-diffusion-rate)).
            matrix3DAddScaled(chemMatrixPointer, tempMatrix, (controller get-iteration-step)).
        }

    - to diffuse-chemicals-periodically:
        % Updates the concentration of each OBJECT(PatchChemical) being tracked
        % in the patch grid by diffusing the chemicals according to their
        % diffusion rates.  This method is called automatically by METHOD(update-concentrations). 
        chem (object).
        chemMatrixPointer (pointer).
        
        for each chem in diffusingChemicals: {
            chemMatrixPointer = (chemicalConcentrationMatrix{chem} get-matrix-pointer).
            matrix3DDiffusePeriodic(chemMatrixPointer, tempMatrix, (chem get-diffusion-rate)).
            matrix3DAddScaled(chemMatrixPointer, tempMatrix, (controller get-iteration-step)).
        }
                        
    - to decay-chemicals:
        % Updates the concentration of each OBJECT(PatchChemical) by reducing the
        % current concentraion by the decay rate.  The decay rate is treated
        % as either a linear or exponential rate depending on the chemical's
        % decay type.  This method is called automatically by METHOD(update-concentrations).
        chem (object).
        chemMatrixPointer (pointer).
        
        for each chem in linearlyDecayingChemicals:
            chemicalConcentrationMatrix{chem} add-scalar value ((chem get-decay-rate) * -1.0).
        
        for each chem in exponentiallyDecayingChemicals: {
            chemMatrixPointer = (chemicalConcentrationMatrix{chem} get-matrix-pointer).
            matrix3DCopy(chemMatrixPointer, tempMatrix).
            matrix3DAddScaled(chemMatrixPointer, tempMatrix, ((chem get-decay-rate) * -1.0)).
            }
            
    - to get-concentration of theDiffusable (object) at-x xIndex (int) at-y yIndex (int) at-z zIndex (int):
        % Gets the concentration of the chemical in the patch.  Note
        % that this is a normalized concentration.  If you want the
        % total concentration, multiply by the OBJECT(Patch) size.
        % You don't normally call this directly

        return (chemicalConcentrationMatrix{theDiffusable} get-value at-x xIndex at-y yIndex at-z zIndex).
        
    - to set-concentration of theDiffusable (object) at-x xIndex (int) at-y yIndex (int) at-z zIndex (int) to theValue (float):
        % Sets the concentration of the chemical in the patch.  Note
        % that this is a normalized concentration.  If you want to
        % use total concentration, multiply by the OBJECT(Patch) size first.
        % You don't normally call this directly

        chemicalConcentrationMatrix{theDiffusable} set-value to theValue
                                                                     at-x xIndex
                                                                     at-y yIndex
                                                                     at-z zIndex.
        
    - to increase-concentration of theDiffusable (object) by theValue (float) at-x xIndex (int) at-y yIndex (int) at-z zIndex (int):
        % Adds a quantify of the chemical to the patch.  The quantity is divided
        % by the patch volume to get the concentration added.
        % You don't normally call this directly
        currentValue (int).
        currentValue = chemicalConcentrationMatrix{theDiffusable} get-value at-x xIndex at-y yIndex at-z zIndex.
        currentValue += (theValue / patchVolume).
        chemicalConcentrationMatrix{theDiffusable} set-value to currentValue at-x xIndex at-y yIndex at-z zIndex.        

    - to decrease-concentration of theDiffusable (object) by theValue (float) at-x xIndex (int) at-y yIndex (int) at-z zIndex (int):
        % Removes a quantify of the chemical to the patch.  The quantity is divided
        % by the patch volume to get the concentration removed.
        % You don't normally call this directly
        currentValue (int).
        currentValue = chemicalConcentrationMatrix{theDiffusable} get-value at-x xIndex at-y yIndex at-z zIndex.
        currentValue -= (theValue / patchVolume).
        chemicalConcentrationMatrix{theDiffusable} set-value to currentValue at-x xIndex at-y yIndex at-z zIndex.        

    + to get-description:
        return "$xSize x $ySize x $zSize".

    + to dearchive:
        x, y, z (int).
        index (int).

        gridPointer = newPatchGrid(location, patchSize, xSize, ySize, zSize).

        for x=0,x<xSize,x++: {
            for y=0,y<ySize,y++: {
                for z=0,z<zSize,z++: {
                    setPatchObjectAtIndex(gridPointer, patches{index}, x, y, z).
                    patches{index} set-patch-pointer to patchAtIndex(gridPointer, x, y, z).
                    patches{index} update-colors.
                    index++.
                }
            }
        }

        return 1.

    + to archive:
        return 1.
        
    
}
