@use PatchGrid.

PatchGrid : PatchToroid (aka PatchToroids) [version 2.2] {
	% OBJECT(PatchToroid) is a subclass of OBJECT(PatchGrid) in which the 
	% patch neighbors are initialized in a toroidal fashion, such that 
	% patches on the edge of the grid are "connected" (via neighbor 
	% relationships) to patches on the opposite edge.
	% <P>
	% Note that since OBJECT(PatchGrid) objects can already be 3 dimensional,
	% that a 3D toroidal OBJECT(PatchGrid) is actually not the traditional 
	% donut shaped toroidal topology--it's the corresponding topology in 
	% 4 dimensions.  Now I don't know about you, but I get a headache
	% thinking about this stuff, so let's just agree that "toroid" is not
	% the totally accurate term, but that it's the easiest way to describe
	% what's going on here.

	+ to get-patch-at x xind (int) y yind (int) z zind (int):
		% Returns the patch object associated with the specified indices.  
		% If the indices are out of bounds, they will be "wrapped around"
		% to the other side of the PatchToroid.

		if xind >= xSize: xind %= xSize.
		else if xind < 0: xind = xSize + (xind % xSize).

		if yind >= ySize: yind %= ySize.
		else if yind < 0: yind = ySize + (yind % ySize).

		if zind >= zSize: zind %= zSize.
		else if zind < 0: zind = zSize + (zind % zSize).

        return patchObjectAtIndex(gridPointer, xind, yind, zind).
        
    + to diffuse-chemicals:
        % Updates the concentration of each OBJECT(PatchChemical) being tracked
        % in the patch grid by diffusing the chemicals according to their
        % diffusion rates.  This method is called automatically by METHOD(update-concentrations). 
        chem (object).
        chemMatrixPointer (pointer).
        
        for each chem in diffusingChemicals: {
            chemMatrixPointer = (chemicalConcentrationMatrix{chem} get-matrix-pointer).
            matrix3DDiffusePeriodic(chemMatrixPointer, tempMatrix, (chem get-diffusion-rate)).
            matrix3DAddScaled(chemMatrixPointer, tempMatrix, 1.0).
        }

}
